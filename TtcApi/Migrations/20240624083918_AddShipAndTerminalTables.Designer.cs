// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TtcApi.Data;

#nullable disable

namespace TtcApi.Migrations
{
    [DbContext(typeof(TTCContext))]
    [Migration("20240624083918_AddShipAndTerminalTables")]
    partial class AddShipAndTerminalTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TtcApi.Models.Lading", b =>
                {
                    b.Property<int>("LadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LadingId"));

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Hoeveelheid")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tijd")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LadingId");

                    b.HasIndex("ProductName");

                    b.HasIndex("ShipName");

                    b.HasIndex("TerminalName");

                    b.ToTable("Ladings");
                });

            modelBuilder.Entity("TtcApi.Models.Product", b =>
                {
                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gevaren")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verpakkingsgroep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TtcApi.Models.Ship", b =>
                {
                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniekEuropeesScheepsidentificatienummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipName");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("TtcApi.Models.StatusLading", b =>
                {
                    b.Property<int>("StatusLadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusLadingId"));

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusLadingId");

                    b.HasIndex("LadingId");

                    b.ToTable("StatusLadings");
                });

            modelBuilder.Entity("TtcApi.Models.Terminal", b =>
                {
                    b.Property<string>("TerminalName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerminalName");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("VeiligheidsChecklist", b =>
                {
                    b.Property<int>("VeiligheidsChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VeiligheidsChecklistId"));

                    b.Property<bool>("IsAlarmNoodstopBekend")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoeltreffendeVerlichtingVerzekerd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDrukGasterugvoerleidingVeilig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGasafvoerleidingCorrectAangesloten")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLaadtemperatuurBinnenToegestaneBandbreedte")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNooduitgangVrij")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOvervulbeveiligingBeproefd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRookverbodAfgekondigd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchipGoedGemeerd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSchipWalVerbindingVeilig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUitschakelingPompVanafWalMogelijk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerblijftijdVastgesteldEnGedocumenteerd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVlamkerendeInrichtingAanwezig")
                        .HasColumnType("bit");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ZijnAansluitingenAfgeblind")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnAlleKleppenGecontroleerd")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnBrandblusApparatenBedrijfsklaar")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnDeurenEnRamenGesloten")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnLaadarmenVrijBeweegbaar")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnLeidingenInGoedeStaat")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnRadarEnAndereElektrischeApparatenUit")
                        .HasColumnType("bit");

                    b.Property<bool>("ZijnVerwarmingsapparatenUitgeschakeld")
                        .HasColumnType("bit");

                    b.HasKey("VeiligheidsChecklistId");

                    b.HasIndex("LadingId");

                    b.HasIndex("ShipName");

                    b.HasIndex("TerminalName");

                    b.ToTable("VeiligheidsChecklists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TtcApi.Models.Lading", b =>
                {
                    b.HasOne("TtcApi.Models.Product", "Product")
                        .WithMany("Ladings")
                        .HasForeignKey("ProductName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TtcApi.Models.Ship", "Ship")
                        .WithMany("Ladings")
                        .HasForeignKey("ShipName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TtcApi.Models.Terminal", "Terminal")
                        .WithMany("Ladings")
                        .HasForeignKey("TerminalName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Ship");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("TtcApi.Models.StatusLading", b =>
                {
                    b.HasOne("TtcApi.Models.Lading", "Lading")
                        .WithMany()
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lading");
                });

            modelBuilder.Entity("VeiligheidsChecklist", b =>
                {
                    b.HasOne("TtcApi.Models.Lading", "Lading")
                        .WithMany("VeiligheidsChecklists")
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TtcApi.Models.Ship", "Ship")
                        .WithMany("VeiligheidsChecklists")
                        .HasForeignKey("ShipName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TtcApi.Models.Terminal", "Terminal")
                        .WithMany("VeiligheidsChecklists")
                        .HasForeignKey("TerminalName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lading");

                    b.Navigation("Ship");

                    b.Navigation("Terminal");
                });

            modelBuilder.Entity("TtcApi.Models.Lading", b =>
                {
                    b.Navigation("VeiligheidsChecklists");
                });

            modelBuilder.Entity("TtcApi.Models.Product", b =>
                {
                    b.Navigation("Ladings");
                });

            modelBuilder.Entity("TtcApi.Models.Ship", b =>
                {
                    b.Navigation("Ladings");

                    b.Navigation("VeiligheidsChecklists");
                });

            modelBuilder.Entity("TtcApi.Models.Terminal", b =>
                {
                    b.Navigation("Ladings");

                    b.Navigation("VeiligheidsChecklists");
                });
#pragma warning restore 612, 618
        }
    }
}
